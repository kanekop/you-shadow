以下は、Replitのアシスタントに渡すのに適した英訳です：

---

### Specific Instructions for Modifying `app.py`

Please review all route functions in the `app.py` file (functions defined using `@app.route(...)`) and apply the following modifications where applicable:

---

**Pattern 1: Replace simple error responses**

* **Find**: Code in the format `return jsonify({"error": "..."}), HTTP status code`.
* **Replace with**: `return api_error_response("...", HTTP status code)`. The default status code is 400 if not specified.
* **Example:**

  ```python
  # Before
  if 'audio' not in request.files:
      return jsonify({"error": "Audio file is missing"}), 400

  # After
  if 'audio' not in request.files:
      return api_error_response("Audio file is missing")  # Default 400
  ```

  ```python
  # Before
  if not user_id:
      return jsonify({"error": "User not authenticated"}), 401

  # After
  if not user_id:
      return api_error_response("User not authenticated", 401)
  ```

---

**Pattern 2: Replace broad `try...except` error handlers**

* **Find**: `try...except Exception as e:` blocks that include `return jsonify({"error": ...})`, especially around transcription handling (`transcribe_audio`) or file handling.
* **Replace with**: In the `except` block, use `handle_transcription_error(e, "Contextual error message")` as the return value. Be sure to call `db.session.rollback()` if a database operation has occurred.
* **Example (such as in `/evaluate_custom_shadowing`):**

  ```python
  # Before
  # except Exception as e:
  #     db.session.rollback()
  #     current_app.logger.error(f"!! Unexpected error: {e}")
  #     return jsonify({"error": "An unexpected error occurred during evaluation."}), 500

  # After
  except ValueError as ve:
      db.session.rollback()
      return api_error_response(str(ve), 400)
  except FileNotFoundError as fnfe:
      db.session.rollback()
      return handle_transcription_error(fnfe, "File processing error")
  except ConnectionError as ce:
      db.session.rollback()
      return handle_transcription_error(ce, "External service connection error")
  # except openai.APIError as oae:
  #     db.session.rollback()
  #     return handle_transcription_error(oae, "OpenAI API error")
  except Exception as e:
      db.session.rollback()
      return handle_transcription_error(e, f"Unexpected server error at {request.path}")
  ```

> **Note**: Avoid using `print()` or `logger.error()` directly inside these `except` blocks — `handle_transcription_error()` should handle all logging and error messaging.

---

### Key Endpoints to Review and Modify

Please apply the above changes in the following route handlers, as well as others that follow the same patterns:

* `/upload_custom_audio`
* `/evaluate_custom_shadowing`
* `/evaluate_shadowing`
* `/evaluate_read_aloud`
* `/evaluate_youtube`
* `/api/recordings/upload`
* `/api/save_material` (if any error responses exist)
* `/api/my_materials` (if any error responses exist)
* `/api/practice/logs` (if any error responses exist)
* `/api/log_attempt` (if any error responses exist)

---

### Additional Notes

* Ensure necessary imports are added at the top of `app.py`, such as:

  ```python
  from flask import jsonify, current_app
  ```

  and import statements for the helper functions (e.g., `api_error_response`, `handle_transcription_error`).
* After applying the changes, run the app and test several error scenarios (e.g., uploading without selecting a file, uploading unsupported file formats) to ensure the new error handling is functioning as expected.

Thank you!

---

必要なら、この内容をMarkdown形式でも出力できます。どうしますか？
