3.  **Modify Evaluation Logic (Backend Flask endpoint and potentially `wer_utils.py` caller):**
    * When the user clicks "Submit & Evaluate," the entire recording (including the warm-up part) is sent to the backend.
    * The backend transcribes the *entire* user recording using OpenAI Whisper.
    * **Crucially, before calculating the WER and Diff:**
        * Retrieve the known transcript of the "warm-up" audio (e.g., `"This is your warm-up sentence! ..."`).
        * Retrieve the transcript of the user's *main* uploaded audio (obtained during the initial upload step).
        * Retrieve the transcript of the user's *entire* recording (warm-up + main attempt).
        * **Prepare for WER:**
            * Original Text for comparison = Transcript of the *main* audio only.
            * User's Text for comparison = Transcript of the user's recording, but *remove* the portion corresponding to the warm-up audio transcript from the beginning. (You might need string manipulation based on the known warm-up transcript length or content).
        * Calculate WER and Diff using these adjusted "main audio only" texts.
        * Return the results (WER score based on main audio, Diff view potentially highlighting differences in the main part) to the frontend.

**Context & Files to Consider:**

* Frontend logic is likely in `custom-shadowing.js` and `templates/custom-shadowing.html`.
* Backend endpoint handling the upload, transcription, and evaluation for this feature needs modification (likely in `app.py` or a related blueprint).
* The WER calculation might be invoked after transcription in the backend endpoint. The logic adjustment needs to happen *before* calling the core WER function, ensuring it receives only the relevant parts of the transcripts. Reference `wer_utils.py` and `diff_viewer.py`.
* The warm-up audio file should be placed appropriately (e.g., in `static/audio/`).

Please implement these changes, ensuring the warm-up audio plays seamlessly before the main audio, and the evaluation correctly excludes the warm-up portion. Provide the necessary Python (Flask), JavaScript, and potentially HTML code modifications.